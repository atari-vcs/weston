From cdf2845b01305a37f314ddcc011440c6caa54db3 Mon Sep 17 00:00:00 2001
From: Marius Vlad <marius.vlad@collabora.com>
Date: Sat, 20 Mar 2021 17:58:20 +0200
Subject: [PATCH 7/7] window-manager: Force xwayland surfaces be fullscreen if
 using kiosk-shell

kiosk-shell will by default make all windows/surfaces be fullscreen and
with with that, they'll be placed into the normal_layer instead of
fullscreen_layer, to make sure pop-ups created by xwayland surfaces are
correctly displayed.

This patch will force xwayland surfaces added in the normal_layer
to be set as fullscreen, when using the kiosk-shell.

Signed-off-by: Marius Vlad <marius.vlad@collabora.com>
---
 xwayland/meson.build      |  2 +-
 xwayland/window-manager.c | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/xwayland/meson.build b/xwayland/meson.build
index 896d6314..547e11c7 100644
--- a/xwayland/meson.build
+++ b/xwayland/meson.build
@@ -19,7 +19,7 @@ dep_names_xwayland = [
 	'cairo-xcb',
 ]
 
-deps_xwayland = [ dep_libweston_public ]
+deps_xwayland = [ dep_libweston_public, dep_lib_desktop ]
 
 foreach name : dep_names_xwayland
 	d = dependency(name, required: false)
diff --git a/xwayland/window-manager.c b/xwayland/window-manager.c
index de868218..1e6bdeb7 100644
--- a/xwayland/window-manager.c
+++ b/xwayland/window-manager.c
@@ -42,6 +42,7 @@
 #include <linux/input.h>
 
 #include <libweston/libweston.h>
+#include <libweston-desktop/libweston-desktop.h>
 #include "xwayland.h"
 #include "xwayland-internal-interface.h"
 
@@ -195,6 +196,8 @@ legacy_fullscreen(struct weston_wm *wm,
 static void
 xserver_map_shell_surface(struct weston_wm_window *window,
 			  struct weston_surface *surface);
+static void
+weston_wm_window_set_net_wm_state(struct weston_wm_window *window);
 
 static bool
 wm_debug_is_enabled(struct weston_wm *wm)
@@ -504,6 +507,13 @@ static void
 weston_wm_window_read_properties(struct weston_wm_window *window)
 {
 	struct weston_wm *wm = window->wm;
+	const struct weston_desktop_xwayland_interface *xwayland_interface =
+		wm->server->compositor->xwayland_interface;
+	struct weston_desktop_xwayland *xwayland =
+		wm->server->compositor->xwayland;
+	struct weston_desktop *desktop =
+		xwayland_interface->get_weston_desktop(xwayland);
+	const char *running_shell = weston_desktop_get_api_name(desktop);
 
 #define F(field) (&window->field)
 	const struct {
@@ -645,6 +655,15 @@ weston_wm_window_read_properties(struct weston_wm_window *window)
 		if (!window->machine || strcmp(window->machine, name))
 			window->pid = 0;
 	}
+
+	if (!strcmp(running_shell, "kiosk-shell") &&
+	    window->type == wm->atom.net_wm_window_type_normal &&
+	    !window->fullscreen) {
+		window->fullscreen = 1;
+		window->maximized_vert = 0;
+		window->maximized_horz = 0;
+		weston_wm_window_set_net_wm_state(window);
+	}
 }
 
 #undef TYPE_WM_PROTOCOLS
@@ -1769,11 +1788,24 @@ weston_wm_window_handle_state(struct weston_wm_window *window,
 		wm->server->compositor->xwayland_interface;
 	uint32_t action, property1, property2;
 	int maximized = weston_wm_window_is_maximized(window);
+	struct weston_desktop_xwayland *xwayland =
+		wm->server->compositor->xwayland;
+	struct weston_desktop *desktop =
+		xwayland_interface->get_weston_desktop(xwayland);
+	const char *running_shell = weston_desktop_get_api_name(desktop);
 
 	action = client_message->data.data32[0];
 	property1 = client_message->data.data32[1];
 	property2 = client_message->data.data32[2];
 
+        if (!strcmp(running_shell, "kiosk-shell") &&
+	    window->type == wm->atom.net_wm_window_type_normal) {
+                property1 = wm->atom.net_wm_state_fullscreen;
+                property2 = wm->atom.net_wm_state_fullscreen;
+                action = _NET_WM_STATE_ADD;
+                wm_printf(wm, "XWM: Note: Replacing client message with fullscreen state addition\n");
+        }
+
 	if ((property1 == wm->atom.net_wm_state_fullscreen ||
 	     property2 == wm->atom.net_wm_state_fullscreen) &&
 	    update_state(action, &window->fullscreen)) {
-- 
2.29.2

