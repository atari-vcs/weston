From 79bd774a38cee7e9780e9934e5730c8fae5296f4 Mon Sep 17 00:00:00 2001
From: Marius Vlad <marius.vlad@collabora.com>
Date: Fri, 26 Mar 2021 16:21:48 +0200
Forwarded: not-needed
Subject: [PATCH 1/5] kiosk-shell: Add additional layers

And with it, place certain applications based on path, in those layers.

- dashboard is placed in the normal layer
- in-game menu in a layer above the normal layer
- notify (notification) in the upper most top layer

Everything else goes into the normal layer (and implicitly they'll be on
top of the dashboard app) to keep xwayland surfaces
from working incorrectly.

Placing the bundles in a distinct, on-top of the normal layer would make
menu or dialogs xwayland surfaces not being displayed anymore. We still
have a bundles layer in case we don't really care about menu/dialog
pop-ups from dashboard for instance.

Signed-off-by: Marius Vlad <marius.vlad@collabora.com>
---
 kiosk-shell/kiosk-shell.c | 130 ++++++++++++++++++++++++++++++++++++--
 kiosk-shell/kiosk-shell.h |   5 ++
 2 files changed, 130 insertions(+), 5 deletions(-)

diff --git a/kiosk-shell/kiosk-shell.c b/kiosk-shell/kiosk-shell.c
index f1a4b0e2..651a8111 100644
--- a/kiosk-shell/kiosk-shell.c
+++ b/kiosk-shell/kiosk-shell.c
@@ -23,10 +23,13 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include "config.h"
+
 #include <assert.h>
 #include <linux/input.h>
 #include <stdbool.h>
 #include <stdint.h>
+#include <stdio.h>
 #include <string.h>
 #include <errno.h>
 #include <unistd.h>
@@ -39,6 +42,10 @@
 
 #include <libweston/xwayland-api.h>
 
+#define ATARI_AUTHORIZED_DASHBOARD_PATH 	"/usr/local/dashboard/Dashboard"
+#define ATARI_AUTHORIZED_INGAMEMENU_PATH 	"/usr/local/dashboard/InGameMenu"
+#define ATARI_AUTHORIZED_NOTIFICATION_PATH 	"/usr/local/dashboard/notify"
+
 static struct kiosk_shell_surface *
 get_kiosk_shell_surface(struct weston_surface *surface)
 {
@@ -54,6 +61,9 @@ get_kiosk_shell_surface(struct weston_surface *surface)
 static void
 kiosk_shell_seat_handle_destroy(struct wl_listener *listener, void *data);
 
+static struct weston_layer_entry *
+kiosk_shell_verify_apps(struct kiosk_shell_surface *shsurf);
+
 static struct kiosk_shell_seat *
 get_kiosk_shell_seat(struct weston_seat *seat)
 {
@@ -67,6 +77,42 @@ get_kiosk_shell_seat(struct weston_seat *seat)
 			    struct kiosk_shell_seat, seat_destroy_listener);
 }
 
+static char *
+client_get_exe_path(struct wl_client *client, pid_t _pid)
+{
+       static const size_t buffer_size = 256;
+       pid_t pid = 0;
+       char *buffer = NULL;
+       char *proc_exe_path = NULL;
+       int ret;
+
+       if (!client) {
+	       pid = _pid;
+       } else {
+	       wl_client_get_credentials(client, &pid, NULL, NULL);
+       }
+
+       if (asprintf(&proc_exe_path, "/proc/%d/exe", pid) < 0)
+               goto err;
+
+       buffer = zalloc(buffer_size);
+       if (!buffer)
+               goto err;
+
+       ret = readlink(proc_exe_path, buffer, buffer_size - 1);
+       if (ret < 0)
+               goto err;
+
+       free(proc_exe_path);
+
+       return buffer;
+
+err:
+       free(buffer);
+       free(proc_exe_path);
+       return NULL;
+}
+
 /*
  * kiosk_shell_surface
  */
@@ -338,6 +384,7 @@ kiosk_shell_surface_create(struct kiosk_shell *shell,
 	shsurf->desktop_surface = desktop_surface;
 	shsurf->view = view;
 	shsurf->shell = shell;
+	shsurf->client = wl_client;
 
 	weston_desktop_surface_set_user_data(desktop_surface, shsurf);
 
@@ -608,7 +655,7 @@ desktop_surface_added(struct weston_desktop_surface *desktop_surface,
  * but if we can't find one we fall back to the top view regardless of
  * parentage. */
 static struct weston_view *
-find_focus_successor(struct weston_layer *layer,
+find_focus_successor(struct weston_layer_entry *layer_entry,
 		     struct kiosk_shell_surface *shsurf)
 {
 	struct kiosk_shell_surface *parent_root =
@@ -616,7 +663,7 @@ find_focus_successor(struct weston_layer *layer,
 	struct weston_view *top_view = NULL;
 	struct weston_view *view;
 
-	wl_list_for_each(view, &layer->view_list.link, layer_link.link) {
+	wl_list_for_each(view, &layer_entry->link, layer_link.link) {
 		struct kiosk_shell_surface *view_shsurf;
 		struct kiosk_shell_surface *root;
 
@@ -649,11 +696,13 @@ desktop_surface_removed(struct weston_desktop_surface *desktop_surface,
 		weston_desktop_surface_get_surface(desktop_surface);
 	struct weston_view *focus_view;
 	struct weston_seat *seat;
+	struct weston_layer_entry *list_entry;
 
 	if (!shsurf)
 		return;
 
-	focus_view = find_focus_successor(&shell->normal_layer, shsurf);
+	list_entry = kiosk_shell_verify_apps(shsurf);
+	focus_view = find_focus_successor(list_entry, shsurf);
 
 	if (focus_view) {
 		wl_list_for_each(seat, &shell->compositor->seat_list, link) {
@@ -666,6 +715,55 @@ desktop_surface_removed(struct weston_desktop_surface *desktop_surface,
 	kiosk_shell_surface_destroy(shsurf);
 }
 
+static struct weston_layer_entry *
+kiosk_shell_get_layer_by_app_path(const char *path, struct kiosk_shell *shell)
+{
+	if (strcmp(path, ATARI_AUTHORIZED_DASHBOARD_PATH) == 0)
+		return &shell->normal_layer.view_list;
+
+	if (strcmp(path, ATARI_AUTHORIZED_INGAMEMENU_PATH) == 0)
+		return &shell->menu_layer.view_list;
+
+	if (strcmp(path, ATARI_AUTHORIZED_NOTIFICATION_PATH) == 0)
+		return &shell->popup_layer.view_list;
+
+	return &shell->normal_layer.view_list;
+}
+
+static struct weston_layer_entry *
+kiosk_shell_verify_apps(struct kiosk_shell_surface *shsurf)
+{
+	const char *path = NULL;
+	struct weston_layer_entry *layer_list = NULL;
+
+	if (shsurf->client)
+		path = client_get_exe_path(shsurf->client, -1);
+
+	if (!path) {
+		struct weston_desktop_client *client =
+			weston_desktop_surface_get_client(shsurf->desktop_surface);
+
+		struct wl_client *wl_client =
+			weston_desktop_client_get_client(client);
+
+		if (!wl_client) {
+			pid_t pid =
+				weston_desktop_surface_get_pid(shsurf->desktop_surface);
+			path = client_get_exe_path(NULL, pid);
+		}
+
+		/* we should be getting a valid path at this point */
+		if (!path)
+			return &shsurf->shell->normal_layer.view_list;
+
+		layer_list = kiosk_shell_get_layer_by_app_path(path, shsurf->shell);
+		return layer_list;
+	}
+
+	layer_list = kiosk_shell_get_layer_by_app_path(path, shsurf->shell);
+	return layer_list;
+}
+
 static void
 desktop_surface_committed(struct weston_desktop_surface *desktop_surface,
 			  int32_t sx, int32_t sy, void *data)
@@ -706,7 +804,10 @@ desktop_surface_committed(struct weston_desktop_surface *desktop_surface,
 	}
 
 	if (!weston_surface_is_mapped(surface)) {
-		weston_layer_entry_insert(&shsurf->shell->normal_layer.view_list,
+		struct weston_layer_entry *layer_list =
+			kiosk_shell_verify_apps(shsurf);
+
+		weston_layer_entry_insert(layer_list,
 					  &shsurf->view->layer_link);
 		shsurf->view->is_mapped = true;
 		surface->is_mapped = true;
@@ -874,6 +975,7 @@ static const struct weston_desktop_api kiosk_shell_desktop_api = {
 	.set_xwayland_position = desktop_surface_set_xwayland_position,
 };
 
+
 /*
  * kiosk_shell
  */
@@ -911,8 +1013,11 @@ kiosk_shell_activate_view(struct kiosk_shell *shell,
 	 * obscure all children.
 	 */
 	if (shsurf->parent) {
+		struct weston_layer_entry *layer_entry =
+			kiosk_shell_verify_apps(shsurf);
+
 		weston_layer_entry_remove(&view->layer_link);
-		weston_layer_entry_insert(&shell->normal_layer.view_list,
+		weston_layer_entry_insert(layer_entry,
 					  &view->layer_link);
 		weston_view_geometry_dirty(view);
 		weston_surface_damage(view->surface);
@@ -1036,6 +1141,7 @@ kiosk_shell_handle_output_resized(struct wl_listener *listener, void *data)
 
 	kiosk_shell_output_recreate_background(shoutput);
 
+	/* FIXME: Should happen on all layers */
 	wl_list_for_each(view, &shell->normal_layer.view_list.link,
 			 layer_link.link) {
 		struct kiosk_shell_surface *shsurf;
@@ -1065,6 +1171,7 @@ kiosk_shell_handle_output_moved(struct wl_listener *listener, void *data)
 					 view->geometry.y + output->move_y);
 	}
 
+	/* FIXME: Should happen on all layers */
 	wl_list_for_each(view, &shell->normal_layer.view_list.link,
 			 layer_link.link) {
 		if (view->output != output)
@@ -1132,6 +1239,10 @@ wet_shell_init(struct weston_compositor *ec,
 	weston_layer_init(&shell->background_layer, ec);
 	weston_layer_init(&shell->normal_layer, ec);
 
+	weston_layer_init(&shell->bundles_layer, ec);
+	weston_layer_init(&shell->menu_layer, ec);
+	weston_layer_init(&shell->popup_layer, ec);
+
 	weston_layer_set_position(&shell->background_layer,
 				  WESTON_LAYER_POSITION_BACKGROUND);
 	/* We use the NORMAL layer position, so that xwayland surfaces, which
@@ -1139,6 +1250,15 @@ wet_shell_init(struct weston_compositor *ec,
 	weston_layer_set_position(&shell->normal_layer,
 				  WESTON_LAYER_POSITION_NORMAL);
 
+	weston_layer_set_position(&shell->bundles_layer,
+				  WESTON_LAYER_POSITION_NORMAL + 2);
+
+	weston_layer_set_position(&shell->menu_layer,
+				  WESTON_LAYER_POSITION_NORMAL + 3);
+
+	weston_layer_set_position(&shell->popup_layer,
+				  WESTON_LAYER_POSITION_TOP_UI);
+
 	shell->desktop = weston_desktop_create(ec, &kiosk_shell_desktop_api,
 					       shell);
 	if (!shell->desktop)
diff --git a/kiosk-shell/kiosk-shell.h b/kiosk-shell/kiosk-shell.h
index 0edf9d80..740ecfd2 100644
--- a/kiosk-shell/kiosk-shell.h
+++ b/kiosk-shell/kiosk-shell.h
@@ -41,6 +41,9 @@ struct kiosk_shell {
 
 	struct weston_layer background_layer;
 	struct weston_layer normal_layer;
+	struct weston_layer bundles_layer;
+	struct weston_layer menu_layer;
+	struct weston_layer popup_layer;
 
 	struct wl_list output_list;
 	const struct weston_xwayland_surface_api *xwayland_surface_api;
@@ -70,6 +73,8 @@ struct kiosk_shell_surface {
 		int32_t x;
 		int32_t y;
 	} xwayland;
+
+	struct wl_client *client;
 };
 
 struct kiosk_shell_seat {
-- 
2.29.2

